import { Controller, Get, Post, Body, Request, Res, UseGuards, Delete, Put, UnauthorizedException, BadRequestException, HttpCode, HttpStatus } from '@nestjs/common';
import { LocalAuthGuard } from 'src/auth/guards/local-auth.guard';
import { AuthenticatedGuard } from 'src/auth/guards/authenticated.guard';
import { EmailValidationService } from 'src/email-validation/email-validation.service';
import { UsersService } from 'src/users/users.service';
import DeleteUSer from './dto/delete-user.dto';
import { JwtGuard } from './guards/jwt-auth.guard';
import { AuthService } from './auth.service';

@Controller('auth')
export class AuthController {
    constructor(
        private readonly userService: UsersService,
        private readonly emailValidationService: EmailValidationService,
        private readonly authService: AuthService
        ) {}

    @Post("/signup")
    async addUser(
        @Body('password') userPassword: string,
        @Body('username') username: string
    ) {
        try {
            const result = await this.userService.insertUser(
                username,
                userPassword,
            );
    
            await this.emailValidationService.sendVerificationLink(username);
            
            return {
                msg: 'User successfully registered',
                username: result.username,
            }
        } catch (e ) {
            throw new BadRequestException(e.message);
        }
    }

    @HttpCode(HttpStatus.OK)
    @UseGuards(LocalAuthGuard)
    @Post('/login')
    login(@Request() req): any {

        //The user object is generated by strategy
        return this.authService.login(req.user);
    }

    @UseGuards(JwtGuard)
    @Put('/activate-account')
    async activateAccount(@Body('username') username: string): Promise<any> {
        
        await this.emailValidationService.confirmEmail(username);
    }

    // @UseGuards(JwtGuard)
    @Post('/request-change-password')
    async requestChancePassword(@Body('username') username: string) {
        await this.emailValidationService.sendVerificationLink(username);
    }

    @UseGuards(JwtGuard)
    @Put('/change-password')
    async changePassword(@Body('username') username: string, @Body('password') password: string): Promise<any> {
        await this.userService.updatePassword(username, password);
        
        await this.emailValidationService.sendPasswordChangedConfirmation(username);
    }

    @HttpCode(HttpStatus.OK)
    @UseGuards(AuthenticatedGuard)
    @Post('/logout')
    logout(@Request() req, @Res() res): any {
        req.session.destroy();
        req.logout(function(err) {
            if (err) { return err }   
        });
          
        return res.clearCookie("connect.sid").send({ msg: "Logout successfully" })
        // return { msg: 'logout successfully'}
    }

    @Delete('/delete')
    async deleteUser(@Body() user: DeleteUSer): Promise<any> {
        await this.userService.deleteUser(user.username)
        return
    }
    
    @UseGuards(AuthenticatedGuard)
    @Get('/protected')
    getHello(@Request() req): string {
        return req.user;
    }
}
